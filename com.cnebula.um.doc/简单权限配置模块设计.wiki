=简单权限配置模块设计=
#toc
==1. 引言==
对于基于cnebula平台开发的系统来说，权限配置是一个用户体验很差的设计，而权限配置又是每个系统比不可少的功能，因此，需要设计出一种用户体验好，相对通用，用户理解简单的权限配置模块。
===1.1 名词解释===
**用户组**：对应一个用户规则，该规则指定了哪些用户属于这一个组。\\
**权限规则**：系统中原有的权限规则的概念\\
**打包后的权限规则（权限）**：消除各个权限规则间的依赖关系，使打包后的每一个权限均为必包，不依赖与其他权限规则，打包后的权限规则（权限）的关系均为平铺的关系。\\
===1.2 现有问题===
#规则表达式对于成员馆管理员来说太复杂，配置出错或根本不会配置
#角色的基本属性中的父角色的定义晦涩难懂
#权限配置组中的资源类型编辑和操作编辑对于成员馆管理员来说没有必要知道
#权限规则有些是有依赖关系的

==2. 设计目标==
#在原有的动态角色的基础上，再加入一层，用来屏蔽底层配置的复杂性
#使权限管理成为独立的bundle，插件，可以加入到新的系统中，可以很少改造新系统，方便配置。\\
{{img/role_permision.jpg}}\\
说明：通过角色把用户和权限联系在一起

==3. 流程设计==
#	对基于cnebula平台开发的系统来说，一个系统有且仅有一个权限配置超级管理员，负责系统的高级权限配置管理，可以定义该系统的多个用户规则，多个权限规则以及其他配置，且可以创建管理员
#用户规则和权限规则在系统中已经初始化完成，预置了一些基本的规则。权限配置超级管理员可以根据实际情况对其进行CRUD。
#系统默认为每个成员馆创建一组属于自己的用户规则和权限规则，每个成员馆可以有多个管理员（如馆际互借管理员，统一检索管理员等，以下简称管理员），每个管理员可以管理的权限是独立的，可以相同，也可以不同。管理员可以为自己管理范围内的角色（对应一组权限）分配用户组，但是只能选择，不能编辑或查看规则的详细信息，尤其是表达式。
#对于每一个打包后的权限来说，都是可授权的，即：一个用户拥有了该权限，那么他可以把该权限授予他人，让他人也有使用该权限的权利。
说明：
超级管理员如果能力足够，可以自己新建规则，如果能力不够，可以联系rcs系统管理员，由rcs管理员为该系统创建新的规则，而新的规则可以通过数据订阅下发到该应用系统。
也可以采取系统升级的办法来解决，即：升级sql语句来解决。

==4. 解决方案==
一旦一个应用系统确定，则该系统的角色和每个角色的权限均已确定，管理员不能更改
#规则表达式对于成员馆管理员来说太复杂，配置出错或根本不会配置
系统自动为每个成员馆创建一组用户规则和权限规则，让管理员只能选择关联关系（角色和用户规则），不能编辑规则
#	角色的基本属性中的父角色的定义晦涩难懂
系统自动创建规则，屏蔽其难度，成员馆管理员无需了解。
#	权限配置组中的资源类型编辑和操作编辑对于成员馆管理员来说没有必要知道
取消此可见性（除权限配置超级管理员外）
#	权限规则有些是有依赖关系的
通过配置，打包，消除各个权限规则间的依赖关系，使打包后的每一个权限均为必包\\

==5. 详细设计==
分配服务端和客户端两部分\\

===5.1 服务端===
服务端开发一个独立的bundle，其功能主要有:
#根据管理员不同分类（如馆际互借管理员、统一检索管理员），读取xml配置文件中的相应配置节点，返回配置文件内容，根据内容从数据库中获取相应的角色和权限列表，供客户端生成界面使用
#监听组织（Organization）实体创建，调用为成员馆创建用户规则和权限规则的方法
#创建用户规则和权限规则的方法：为每个新创建的成员馆组织，建立一套属于该馆自己的用户规则和权限规则，根据配置内容，从数据库中获取需要创建的角色列表，\\
对每个正常角色，都创建一个子角色，parent是该角色，creator包含成员馆code、关联的用户规则id和父角色id，用"|"连接，permissionRule是true，\\
即属于成员馆自己的角色，权限和父角色相同。然后用这个子角色关联相应的用户规则\\
对于每个反向角色（作为父角色的反向角色必须为停用状态），都创建一个新的反向角色，\\
但是不需要继承父角色，只是把父角色当成一个生成子角色的模板。用户规则新建一个属于自己的，在父规则的基础上添加机构code，以区分不同的机构的用户组。
为每个机构新建一个默认的用户。UserType为9999，作为该机构所有角色的owner。



\\
{{img/memberRole.jpg}}\\

===5.2 客户端===
#根据当前用户角色生成调用后台服务端程序，用返回的角色和权限列表动态创建界面
#根据数据库当前状态动态显示画面的checkbox是否选中
#根据用户动作，动态设置角色状态，即：checkbox选中状态下角色为启用，未选中状态下角色为停用。
#有扣权角色，如果用户过期或者停用，即时用户同时属于其他用户组，那么也只能拥有扣权权限，不能拥有其他权限
#每个管理员只能配置自己所属的用户规则和权限规则，并且修改以后不能影响其他成员馆的权限。




